// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  accounts  Account[]
  sessions  Session[]
  strategies Strategy[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id               String        @id @default(cuid())
  provider         String
  providerEventId  String
  sport            String?
  sportName        String?
  league           String?
  country          String?
  teamHome         String?
  teamAway         String?
  statusCode       Int?
  timePeriod       String?
  startTime        DateTime?
  lastUpdate       DateTime?
  isLive           Boolean       @default(false)
  score            String?
  raw              Json?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  odds             MatchOdds[]
  strategyPicks    StrategyPick[]

  @@unique([provider, providerEventId])
  @@index([isLive, startTime])
  @@index([startTime])
}

model MatchOdds {
  id       String   @id @default(cuid())
  matchId  String
  type     String
  home     Float?
  draw     Float?
  away     Float?
  line     Float?
  updatedAt DateTime @default(now())

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, type, line])
  @@index([type])
}

model Strategy {
  id          String         @id @default(cuid())
  userId      String
  name        String
  description String?
  rules       Json
  isPublic    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  picks    StrategyPick[]
  rating   StrategyRating?
}

model StrategyPick {
  id           String   @id @default(cuid())
  strategyId   String
  matchId      String
  selection    String   // home | draw | away
  oddsAtPick   Float?
  stake        Float?
  result       String?  // won | lost | void | pending
  settledAt    DateTime?
  createdAt    DateTime @default(now())

  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
  match    Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@index([strategyId])
  @@index([matchId])
}

model StrategyRating {
  id           String   @id @default(cuid())
  strategyId   String   @unique
  totalPicks   Int      @default(0)
  wins         Int      @default(0)
  losses       Int      @default(0)
  voids        Int      @default(0)
  winRate      Float    @default(0)
  roi          Float    @default(0)
  profit       Float    @default(0)
  updatedAt    DateTime @default(now())

  strategy Strategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)
}
